// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}


model User {
  id                    String                  @id @default(cuid())
  name                  String?
  email                 String?                 @unique
  emailVerified         DateTime?
  image                 String?                 
  role                  Enum_RoleName?          @default(USER)
  accounts              Account[]
  sessions              Session[]
  Employee              Employee[]
  HoursWorked           HoursWorked[]
  PerformanceEvaluation PerformanceEvaluation[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model Employee {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  createdBy             User                    @relation(fields: [userId], references: [id])
  userId                String
  createdAt             String
  updatedAt             DateTime                @updatedAt
  baseSalary            Int
  phone                 String
  email                 String
  address               String
  HoursWorked           HoursWorked[]
  PerformanceEvaluation PerformanceEvaluation[]
}

model HoursWorked {
  id         String   @id @default(uuid())
  employee   Employee @relation(fields: [employeeId], references: [id])
  createdBy  User     @relation(fields: [userId], references: [id])
  employeeId String
  userId     String
  hours      Int
  date       String
  createdAt  String
}

model PerformanceEvaluation {
  id                       String   @id @default(uuid())
  createdBy                User     @relation(fields: [userId], references: [id])
  employee                 Employee @relation(fields: [employeeId], references: [id])
  userId                   String
  employeeId               String
  createdAt                String
  initialDate              String
  finalDate                String
  improvementOpportunities String
  description              String
  calification             Int
}

enum Enum_RoleName {
  ADMIN
  USER
}